<launch>
  <arg name="gui" default="true" />
  <arg name="apply_otsu" default="true" doc="Decide applying Otsu's algotirhm threshold. If this value is true, threshold value will be ignored" />
  <arg name="threshold_type" default="0" doc="Specify threshold types. 0: Binary threshold, 1: Binary inverted threshold, 2: Threshold truncated, 3: Threshold to zero, 4: Threshold to zero inverted" />
  <arg name="threshold" default="235" doc="threshold value"/>
  <arg name="canny_low_threshold" default="120" doc="Canny Edge low Threshold"/>
  <arg name="scale" default="8" doc="Specify the scale factor to calculate optical flow." />
  <arg name="quality_level" default="0.01" doc="Parameter characterizing the minimal acceptance quality of image corners." />
  <arg name="min_distance" default="10"  doc="Minimum possible Euclidean distance between the returned corners."/>
  <arg name="block_size" default="3" doc="Size of an average block for computing a derivative covariation matrix over each pixel neighborhood."/>
  <arg name="harris_k" default="0.04" doc="Free parameter of the Harris detector"/>
  <arg name="image_topic_raw" default="/pylon_camera_node/image_raw"/> <!-- "/usb_cam/image_raw" -->
  <arg name="contour_extract" default="true"/>
  <arg name="convex_hull_extract" default="true"/>
  <arg name="moment_extract" default="true"/>

  <arg name="camera_on" default="true"/>
  <arg name="pylon" default="true"/>

  <!-- Define an intermediate argument that is true if camera_on is true and pylon is false -->
  <arg name="launch_usb_cam" value="$(eval arg('pylon') == 'false')" />

  <!-- USB camera driver -->
  <node name="usb_cam" pkg="usb_cam" type="usb_cam_node" output="screen" if="$(arg launch_usb_cam)">
    <param name="video_device" value="/dev/video0" />
    <!--param name="image_width" value="1280" /-->
    <!--param name="image_height" value="720" /-->
    <param name="autoexposure" value="false" />
    <param name="pixel_format" value="yuyv" />
    <param name="camera_frame_id" value="usb_cam" />
    <param name="framerate" value="30" /> <!-- <doc="maximum is 30"/> -->
    <param name="brightness" value="200" /> <!-- <doc="integer, 0-255"/> -->
    <param name="autofocus" value="false" />
    <param name="io_method" value="mmap"/>
  </node>

  <!-- Pylon camera driver -->
  <include file="$(find pylon_camera)/launch/pylon_camera_node.launch" if="$(arg pylon)">
    <arg name="frame_rate" value="50.0"/>
    <!-- <arg name="gige/mtu_size" value="1500"/>
    <arg name="grab_strategy" value="0"/>
    <arg name="grab_timeout" value="500"/> -->
  </include>


  <!-- image visualize -->
  <node name="image_view" pkg="image_view" type="image_view" respawn="false" output="screen">
    <remap from="image" to="$(arg image_topic_raw)"/>
    <param name="autosize" value="true" />
  </node>

  <!-- <node name="image_view" pkg="image_view" type="image_view" respawn="false" output="screen">
    <remap from="image" to="/infratec/image_converted_mono8"/>
    <param name="autosize" value="true" />
  </node> -->

  <node name="geometry" pkg="camera_measures" type="nd_geometry.py">
    <param name="threshold" type="int" value="$(arg threshold)" />
    <param name="image" type="str" value="$(arg image_topic_raw)"/>
  </node>

  <!-- <node name="moments" pkg="camera_measures" type="nd_moments.py">
    <param name="threshold" type="int" value="230" />
    <param name="image" type="str" value="$(arg image_topic_raw)" />
  </node> -->

  <!-- <node name="plot_nit" pkg="rqt_plot" type="rqt_plot" args="/usb_cam/geometry/minor_axis /usb_cam/moments/minor_axis" if="$(arg gui)" /> -->
  <node name="plot_nit" pkg="rqt_plot" type="rqt_plot" args="/usb_cam/geometry/minor_axis" if="$(arg gui)" />


  <!-- Meltpool Geometric Features -->
  <!-- Publish: ellipse, rectangle, area(pixels) -->
  <include file="$(find opencv_apps)/launch/general_contours.launch" if="$(arg contour_extract)">
    <arg name="image"  value="$(arg image_topic_raw)" />
    <arg name="threshold" value="$(arg threshold)" />
  </include>

  <!-- Publish: hulls (opencv_apps/ContourArrayStamped) & Hull Areas - Detected convex hulls of contours. Each contour is stored as a vector of point -->
  <include file="$(find opencv_apps)/launch/convex_hull.launch" if="$(arg convex_hull_extract)">
    <arg name="image"  value="$(arg image_topic_raw)" />
    <arg name="threshold" value="$(arg threshold)" />
  </include>

  <!-- Publish: moment of area -->
  <include file="$(find opencv_apps)/launch/contour_moments.launch" if="$(arg moment_extract)">
    <arg name="image"  value="$(arg image_topic_raw)" />
    <arg name="threshold" value="$(arg threshold)" />
    <arg name="canny_low_threshold" value="$(arg canny_low_threshold)" />
  </include>


</launch>
