// Generated by gencpp from file defects_identification/MsgPointDistance.msg
// DO NOT EDIT!


#ifndef DEFECTS_IDENTIFICATION_MESSAGE_MSGPOINTDISTANCE_H
#define DEFECTS_IDENTIFICATION_MESSAGE_MSGPOINTDISTANCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace defects_identification
{
template <class ContainerAllocator>
struct MsgPointDistance_
{
  typedef MsgPointDistance_<ContainerAllocator> Type;

  MsgPointDistance_()
    : point_to_plane_distance()  {
    }
  MsgPointDistance_(const ContainerAllocator& _alloc)
    : point_to_plane_distance(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _point_to_plane_distance_type;
  _point_to_plane_distance_type point_to_plane_distance;





  typedef boost::shared_ptr< ::defects_identification::MsgPointDistance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::defects_identification::MsgPointDistance_<ContainerAllocator> const> ConstPtr;

}; // struct MsgPointDistance_

typedef ::defects_identification::MsgPointDistance_<std::allocator<void> > MsgPointDistance;

typedef boost::shared_ptr< ::defects_identification::MsgPointDistance > MsgPointDistancePtr;
typedef boost::shared_ptr< ::defects_identification::MsgPointDistance const> MsgPointDistanceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::defects_identification::MsgPointDistance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::defects_identification::MsgPointDistance_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace defects_identification

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'defects_identification': ['/home/chenlequn/SIMTech_ws/src/defects_identification/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::defects_identification::MsgPointDistance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::defects_identification::MsgPointDistance_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::defects_identification::MsgPointDistance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::defects_identification::MsgPointDistance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::defects_identification::MsgPointDistance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::defects_identification::MsgPointDistance_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::defects_identification::MsgPointDistance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c24ec51a2bb9c83a98d25173a7416b03";
  }

  static const char* value(const ::defects_identification::MsgPointDistance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc24ec51a2bb9c83aULL;
  static const uint64_t static_value2 = 0x98d25173a7416b03ULL;
};

template<class ContainerAllocator>
struct DataType< ::defects_identification::MsgPointDistance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "defects_identification/MsgPointDistance";
  }

  static const char* value(const ::defects_identification::MsgPointDistance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::defects_identification::MsgPointDistance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] point_to_plane_distance\n"
;
  }

  static const char* value(const ::defects_identification::MsgPointDistance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::defects_identification::MsgPointDistance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point_to_plane_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgPointDistance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::defects_identification::MsgPointDistance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::defects_identification::MsgPointDistance_<ContainerAllocator>& v)
  {
    s << indent << "point_to_plane_distance[]" << std::endl;
    for (size_t i = 0; i < v.point_to_plane_distance.size(); ++i)
    {
      s << indent << "  point_to_plane_distance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.point_to_plane_distance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFECTS_IDENTIFICATION_MESSAGE_MSGPOINTDISTANCE_H
