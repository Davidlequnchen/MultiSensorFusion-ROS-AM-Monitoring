// Generated by gencpp from file infratec_image_processing/TemperatureFeature.msg
// DO NOT EDIT!


#ifndef INFRATEC_IMAGE_PROCESSING_MESSAGE_TEMPERATUREFEATURE_H
#define INFRATEC_IMAGE_PROCESSING_MESSAGE_TEMPERATUREFEATURE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace infratec_image_processing
{
template <class ContainerAllocator>
struct TemperatureFeature_
{
  typedef TemperatureFeature_<ContainerAllocator> Type;

  TemperatureFeature_()
    : header()
    , highest(0.0)
    , lowest(0.0)
    , variance(0.0)
    , kurtosis(0.0)
    , skewness(0.0)  {
    }
  TemperatureFeature_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , highest(0.0)
    , lowest(0.0)
    , variance(0.0)
    , kurtosis(0.0)
    , skewness(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _highest_type;
  _highest_type highest;

   typedef float _lowest_type;
  _lowest_type lowest;

   typedef float _variance_type;
  _variance_type variance;

   typedef double _kurtosis_type;
  _kurtosis_type kurtosis;

   typedef double _skewness_type;
  _skewness_type skewness;





  typedef boost::shared_ptr< ::infratec_image_processing::TemperatureFeature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::infratec_image_processing::TemperatureFeature_<ContainerAllocator> const> ConstPtr;

}; // struct TemperatureFeature_

typedef ::infratec_image_processing::TemperatureFeature_<std::allocator<void> > TemperatureFeature;

typedef boost::shared_ptr< ::infratec_image_processing::TemperatureFeature > TemperatureFeaturePtr;
typedef boost::shared_ptr< ::infratec_image_processing::TemperatureFeature const> TemperatureFeatureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::infratec_image_processing::TemperatureFeature_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::infratec_image_processing::TemperatureFeature_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::infratec_image_processing::TemperatureFeature_<ContainerAllocator1> & lhs, const ::infratec_image_processing::TemperatureFeature_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.highest == rhs.highest &&
    lhs.lowest == rhs.lowest &&
    lhs.variance == rhs.variance &&
    lhs.kurtosis == rhs.kurtosis &&
    lhs.skewness == rhs.skewness;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::infratec_image_processing::TemperatureFeature_<ContainerAllocator1> & lhs, const ::infratec_image_processing::TemperatureFeature_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace infratec_image_processing

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::infratec_image_processing::TemperatureFeature_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::infratec_image_processing::TemperatureFeature_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::infratec_image_processing::TemperatureFeature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::infratec_image_processing::TemperatureFeature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::infratec_image_processing::TemperatureFeature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::infratec_image_processing::TemperatureFeature_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::infratec_image_processing::TemperatureFeature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25f0a9823d69014b82344a62ef84f03d";
  }

  static const char* value(const ::infratec_image_processing::TemperatureFeature_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25f0a9823d69014bULL;
  static const uint64_t static_value2 = 0x82344a62ef84f03dULL;
};

template<class ContainerAllocator>
struct DataType< ::infratec_image_processing::TemperatureFeature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "infratec_image_processing/TemperatureFeature";
  }

  static const char* value(const ::infratec_image_processing::TemperatureFeature_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::infratec_image_processing::TemperatureFeature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 highest\n"
"float32 lowest\n"
"float32 variance # measure of the spread of a distribution\n"
"float64 kurtosis # measure of non-guassianity\n"
"float64 skewness\n"
"# skewness = 0 : normally distributed.\n"
"# skewness > 0 : more weight in the left tail of the distribution.\n"
"# skewness < 0 : more weight in the right tail of the distribution. \n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::infratec_image_processing::TemperatureFeature_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::infratec_image_processing::TemperatureFeature_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.highest);
      stream.next(m.lowest);
      stream.next(m.variance);
      stream.next(m.kurtosis);
      stream.next(m.skewness);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TemperatureFeature_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::infratec_image_processing::TemperatureFeature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::infratec_image_processing::TemperatureFeature_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "highest: ";
    Printer<float>::stream(s, indent + "  ", v.highest);
    s << indent << "lowest: ";
    Printer<float>::stream(s, indent + "  ", v.lowest);
    s << indent << "variance: ";
    Printer<float>::stream(s, indent + "  ", v.variance);
    s << indent << "kurtosis: ";
    Printer<double>::stream(s, indent + "  ", v.kurtosis);
    s << indent << "skewness: ";
    Printer<double>::stream(s, indent + "  ", v.skewness);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INFRATEC_IMAGE_PROCESSING_MESSAGE_TEMPERATUREFEATURE_H
