// Generated by gencpp from file acoustic_monitoring_msgs/MsgAcousticFeature.msg
// DO NOT EDIT!


#ifndef ACOUSTIC_MONITORING_MSGS_MESSAGE_MSGACOUSTICFEATURE_H
#define ACOUSTIC_MONITORING_MSGS_MESSAGE_MSGACOUSTICFEATURE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace acoustic_monitoring_msgs
{
template <class ContainerAllocator>
struct MsgAcousticFeature_
{
  typedef MsgAcousticFeature_<ContainerAllocator> Type;

  MsgAcousticFeature_()
    : header()
    , rms_energy(0.0)
    , amplitude_envelope(0.0)
    , zero_crossing_rate(0.0)
    , mel_spectrogram()
    , mfccs()
    , ber(0.0)
    , spectral_centroids(0.0)
    , spectral_rolloff(0.0)
    , spectral_bandwidth(0.0)
    , spectral_flatness(0.0)
    , spectral_crest_factor(0.0)
    , spectral_kurtosis(0.0)
    , spectral_variance(0.0)  {
    }
  MsgAcousticFeature_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , rms_energy(0.0)
    , amplitude_envelope(0.0)
    , zero_crossing_rate(0.0)
    , mel_spectrogram(_alloc)
    , mfccs(_alloc)
    , ber(0.0)
    , spectral_centroids(0.0)
    , spectral_rolloff(0.0)
    , spectral_bandwidth(0.0)
    , spectral_flatness(0.0)
    , spectral_crest_factor(0.0)
    , spectral_kurtosis(0.0)
    , spectral_variance(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _rms_energy_type;
  _rms_energy_type rms_energy;

   typedef float _amplitude_envelope_type;
  _amplitude_envelope_type amplitude_envelope;

   typedef float _zero_crossing_rate_type;
  _zero_crossing_rate_type zero_crossing_rate;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _mel_spectrogram_type;
  _mel_spectrogram_type mel_spectrogram;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _mfccs_type;
  _mfccs_type mfccs;

   typedef float _ber_type;
  _ber_type ber;

   typedef float _spectral_centroids_type;
  _spectral_centroids_type spectral_centroids;

   typedef float _spectral_rolloff_type;
  _spectral_rolloff_type spectral_rolloff;

   typedef float _spectral_bandwidth_type;
  _spectral_bandwidth_type spectral_bandwidth;

   typedef float _spectral_flatness_type;
  _spectral_flatness_type spectral_flatness;

   typedef float _spectral_crest_factor_type;
  _spectral_crest_factor_type spectral_crest_factor;

   typedef float _spectral_kurtosis_type;
  _spectral_kurtosis_type spectral_kurtosis;

   typedef float _spectral_variance_type;
  _spectral_variance_type spectral_variance;





  typedef boost::shared_ptr< ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator> const> ConstPtr;

}; // struct MsgAcousticFeature_

typedef ::acoustic_monitoring_msgs::MsgAcousticFeature_<std::allocator<void> > MsgAcousticFeature;

typedef boost::shared_ptr< ::acoustic_monitoring_msgs::MsgAcousticFeature > MsgAcousticFeaturePtr;
typedef boost::shared_ptr< ::acoustic_monitoring_msgs::MsgAcousticFeature const> MsgAcousticFeatureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator1> & lhs, const ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.rms_energy == rhs.rms_energy &&
    lhs.amplitude_envelope == rhs.amplitude_envelope &&
    lhs.zero_crossing_rate == rhs.zero_crossing_rate &&
    lhs.mel_spectrogram == rhs.mel_spectrogram &&
    lhs.mfccs == rhs.mfccs &&
    lhs.ber == rhs.ber &&
    lhs.spectral_centroids == rhs.spectral_centroids &&
    lhs.spectral_rolloff == rhs.spectral_rolloff &&
    lhs.spectral_bandwidth == rhs.spectral_bandwidth &&
    lhs.spectral_flatness == rhs.spectral_flatness &&
    lhs.spectral_crest_factor == rhs.spectral_crest_factor &&
    lhs.spectral_kurtosis == rhs.spectral_kurtosis &&
    lhs.spectral_variance == rhs.spectral_variance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator1> & lhs, const ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acoustic_monitoring_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57131d07b28013debc0969e0928b0739";
  }

  static const char* value(const ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57131d07b28013deULL;
  static const uint64_t static_value2 = 0xbc0969e0928b0739ULL;
};

template<class ContainerAllocator>
struct DataType< ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acoustic_monitoring_msgs/MsgAcousticFeature";
  }

  static const char* value(const ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# time-domain features\n"
"float32 rms_energy\n"
"float32 amplitude_envelope\n"
"float32 zero_crossing_rate\n"
"# freqeuncy domain features\n"
"float32[] mel_spectrogram\n"
"float32[] mfccs\n"
"float32 ber\n"
"float32 spectral_centroids\n"
"float32 spectral_rolloff\n"
"float32 spectral_bandwidth\n"
"float32 spectral_flatness\n"
"float32 spectral_crest_factor\n"
"float32 spectral_kurtosis\n"
"float32 spectral_variance\n"
"\n"
"\n"
"# spectral_centroid computes the \"average\" frequency at each frame, where frequencies are weighted relatively by their energy.\n"
"# spectral_bandwidth similar to centroid, but for variance (or other moments).\n"
"# spectral_rolloff essentially the maximum: finds the frequency f such that almost all of the energy (by default, 85%)\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.rms_energy);
      stream.next(m.amplitude_envelope);
      stream.next(m.zero_crossing_rate);
      stream.next(m.mel_spectrogram);
      stream.next(m.mfccs);
      stream.next(m.ber);
      stream.next(m.spectral_centroids);
      stream.next(m.spectral_rolloff);
      stream.next(m.spectral_bandwidth);
      stream.next(m.spectral_flatness);
      stream.next(m.spectral_crest_factor);
      stream.next(m.spectral_kurtosis);
      stream.next(m.spectral_variance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgAcousticFeature_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acoustic_monitoring_msgs::MsgAcousticFeature_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "rms_energy: ";
    Printer<float>::stream(s, indent + "  ", v.rms_energy);
    s << indent << "amplitude_envelope: ";
    Printer<float>::stream(s, indent + "  ", v.amplitude_envelope);
    s << indent << "zero_crossing_rate: ";
    Printer<float>::stream(s, indent + "  ", v.zero_crossing_rate);
    s << indent << "mel_spectrogram[]" << std::endl;
    for (size_t i = 0; i < v.mel_spectrogram.size(); ++i)
    {
      s << indent << "  mel_spectrogram[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mel_spectrogram[i]);
    }
    s << indent << "mfccs[]" << std::endl;
    for (size_t i = 0; i < v.mfccs.size(); ++i)
    {
      s << indent << "  mfccs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mfccs[i]);
    }
    s << indent << "ber: ";
    Printer<float>::stream(s, indent + "  ", v.ber);
    s << indent << "spectral_centroids: ";
    Printer<float>::stream(s, indent + "  ", v.spectral_centroids);
    s << indent << "spectral_rolloff: ";
    Printer<float>::stream(s, indent + "  ", v.spectral_rolloff);
    s << indent << "spectral_bandwidth: ";
    Printer<float>::stream(s, indent + "  ", v.spectral_bandwidth);
    s << indent << "spectral_flatness: ";
    Printer<float>::stream(s, indent + "  ", v.spectral_flatness);
    s << indent << "spectral_crest_factor: ";
    Printer<float>::stream(s, indent + "  ", v.spectral_crest_factor);
    s << indent << "spectral_kurtosis: ";
    Printer<float>::stream(s, indent + "  ", v.spectral_kurtosis);
    s << indent << "spectral_variance: ";
    Printer<float>::stream(s, indent + "  ", v.spectral_variance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACOUSTIC_MONITORING_MSGS_MESSAGE_MSGACOUSTICFEATURE_H
