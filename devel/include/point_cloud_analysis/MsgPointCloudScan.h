// Generated by gencpp from file point_cloud_analysis/MsgPointCloudScan.msg
// DO NOT EDIT!


#ifndef POINT_CLOUD_ANALYSIS_MESSAGE_MSGPOINTCLOUDSCAN_H
#define POINT_CLOUD_ANALYSIS_MESSAGE_MSGPOINTCLOUDSCAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace point_cloud_analysis
{
template <class ContainerAllocator>
struct MsgPointCloudScan_
{
  typedef MsgPointCloudScan_<ContainerAllocator> Type;

  MsgPointCloudScan_()
    : ready(false)
    , scanning_count(0)  {
    }
  MsgPointCloudScan_(const ContainerAllocator& _alloc)
    : ready(false)
    , scanning_count(0)  {
  (void)_alloc;
    }



   typedef uint8_t _ready_type;
  _ready_type ready;

   typedef int32_t _scanning_count_type;
  _scanning_count_type scanning_count;





  typedef boost::shared_ptr< ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator> const> ConstPtr;

}; // struct MsgPointCloudScan_

typedef ::point_cloud_analysis::MsgPointCloudScan_<std::allocator<void> > MsgPointCloudScan;

typedef boost::shared_ptr< ::point_cloud_analysis::MsgPointCloudScan > MsgPointCloudScanPtr;
typedef boost::shared_ptr< ::point_cloud_analysis::MsgPointCloudScan const> MsgPointCloudScanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator1> & lhs, const ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator2> & rhs)
{
  return lhs.ready == rhs.ready &&
    lhs.scanning_count == rhs.scanning_count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator1> & lhs, const ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace point_cloud_analysis

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e17f7c935aac21da9daa560a5aff6392";
  }

  static const char* value(const ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe17f7c935aac21daULL;
  static const uint64_t static_value2 = 0x9daa560a5aff6392ULL;
};

template<class ContainerAllocator>
struct DataType< ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "point_cloud_analysis/MsgPointCloudScan";
  }

  static const char* value(const ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ready # to tell the analysis node ready or not\n"
"int32 scanning_count # No. of scan\n"
;
  }

  static const char* value(const ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ready);
      stream.next(m.scanning_count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgPointCloudScan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::point_cloud_analysis::MsgPointCloudScan_<ContainerAllocator>& v)
  {
    s << indent << "ready: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ready);
    s << indent << "scanning_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.scanning_count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POINT_CLOUD_ANALYSIS_MESSAGE_MSGPOINTCLOUDSCAN_H
