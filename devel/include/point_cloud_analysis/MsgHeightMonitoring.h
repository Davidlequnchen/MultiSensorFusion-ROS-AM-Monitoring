// Generated by gencpp from file point_cloud_analysis/MsgHeightMonitoring.msg
// DO NOT EDIT!


#ifndef POINT_CLOUD_ANALYSIS_MESSAGE_MSGHEIGHTMONITORING_H
#define POINT_CLOUD_ANALYSIS_MESSAGE_MSGHEIGHTMONITORING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace point_cloud_analysis
{
template <class ContainerAllocator>
struct MsgHeightMonitoring_
{
  typedef MsgHeightMonitoring_<ContainerAllocator> Type;

  MsgHeightMonitoring_()
    : plane_id(0)
    , height_std(0.0)
    , height_mean(0.0)
    , heighest_max_min_difference(0.0)
    , tilt_angle(0.0)  {
    }
  MsgHeightMonitoring_(const ContainerAllocator& _alloc)
    : plane_id(0)
    , height_std(0.0)
    , height_mean(0.0)
    , heighest_max_min_difference(0.0)
    , tilt_angle(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _plane_id_type;
  _plane_id_type plane_id;

   typedef float _height_std_type;
  _height_std_type height_std;

   typedef float _height_mean_type;
  _height_mean_type height_mean;

   typedef float _heighest_max_min_difference_type;
  _heighest_max_min_difference_type heighest_max_min_difference;

   typedef float _tilt_angle_type;
  _tilt_angle_type tilt_angle;





  typedef boost::shared_ptr< ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator> const> ConstPtr;

}; // struct MsgHeightMonitoring_

typedef ::point_cloud_analysis::MsgHeightMonitoring_<std::allocator<void> > MsgHeightMonitoring;

typedef boost::shared_ptr< ::point_cloud_analysis::MsgHeightMonitoring > MsgHeightMonitoringPtr;
typedef boost::shared_ptr< ::point_cloud_analysis::MsgHeightMonitoring const> MsgHeightMonitoringConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator1> & lhs, const ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator2> & rhs)
{
  return lhs.plane_id == rhs.plane_id &&
    lhs.height_std == rhs.height_std &&
    lhs.height_mean == rhs.height_mean &&
    lhs.heighest_max_min_difference == rhs.heighest_max_min_difference &&
    lhs.tilt_angle == rhs.tilt_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator1> & lhs, const ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace point_cloud_analysis

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d5dba450528743fdd28379753715b42a";
  }

  static const char* value(const ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd5dba450528743fdULL;
  static const uint64_t static_value2 = 0xd28379753715b42aULL;
};

template<class ContainerAllocator>
struct DataType< ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator> >
{
  static const char* value()
  {
    return "point_cloud_analysis/MsgHeightMonitoring";
  }

  static const char* value(const ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 plane_id         # the id for the scanning\n"
"float32 height_std\n"
"float32 height_mean\n"
"float32 heighest_max_min_difference\n"
"float32 tilt_angle\n"
;
  }

  static const char* value(const ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.plane_id);
      stream.next(m.height_std);
      stream.next(m.height_mean);
      stream.next(m.heighest_max_min_difference);
      stream.next(m.tilt_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgHeightMonitoring_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::point_cloud_analysis::MsgHeightMonitoring_<ContainerAllocator>& v)
  {
    s << indent << "plane_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.plane_id);
    s << indent << "height_std: ";
    Printer<float>::stream(s, indent + "  ", v.height_std);
    s << indent << "height_mean: ";
    Printer<float>::stream(s, indent + "  ", v.height_mean);
    s << indent << "heighest_max_min_difference: ";
    Printer<float>::stream(s, indent + "  ", v.heighest_max_min_difference);
    s << indent << "tilt_angle: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POINT_CLOUD_ANALYSIS_MESSAGE_MSGHEIGHTMONITORING_H
