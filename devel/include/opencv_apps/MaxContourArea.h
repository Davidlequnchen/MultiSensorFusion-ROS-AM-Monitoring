// Generated by gencpp from file opencv_apps/MaxContourArea.msg
// DO NOT EDIT!


#ifndef OPENCV_APPS_MESSAGE_MAXCONTOURAREA_H
#define OPENCV_APPS_MESSAGE_MAXCONTOURAREA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace opencv_apps
{
template <class ContainerAllocator>
struct MaxContourArea_
{
  typedef MaxContourArea_<ContainerAllocator> Type;

  MaxContourArea_()
    : header()
    , meltpool_contour_area(0.0)
    , ellipse_angle(0.0)
    , ellipse_x(0.0)
    , ellipse_y(0.0)
    , ellipse_width(0.0)
    , ellipse_height(0.0)
    , rectangle_angle(0.0)
    , rectangle_x(0.0)
    , rectangle_y(0.0)
    , rectangle_width(0.0)
    , rectangle_height(0.0)  {
    }
  MaxContourArea_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , meltpool_contour_area(0.0)
    , ellipse_angle(0.0)
    , ellipse_x(0.0)
    , ellipse_y(0.0)
    , ellipse_width(0.0)
    , ellipse_height(0.0)
    , rectangle_angle(0.0)
    , rectangle_x(0.0)
    , rectangle_y(0.0)
    , rectangle_width(0.0)
    , rectangle_height(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _meltpool_contour_area_type;
  _meltpool_contour_area_type meltpool_contour_area;

   typedef double _ellipse_angle_type;
  _ellipse_angle_type ellipse_angle;

   typedef double _ellipse_x_type;
  _ellipse_x_type ellipse_x;

   typedef double _ellipse_y_type;
  _ellipse_y_type ellipse_y;

   typedef double _ellipse_width_type;
  _ellipse_width_type ellipse_width;

   typedef double _ellipse_height_type;
  _ellipse_height_type ellipse_height;

   typedef double _rectangle_angle_type;
  _rectangle_angle_type rectangle_angle;

   typedef double _rectangle_x_type;
  _rectangle_x_type rectangle_x;

   typedef double _rectangle_y_type;
  _rectangle_y_type rectangle_y;

   typedef double _rectangle_width_type;
  _rectangle_width_type rectangle_width;

   typedef double _rectangle_height_type;
  _rectangle_height_type rectangle_height;





  typedef boost::shared_ptr< ::opencv_apps::MaxContourArea_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opencv_apps::MaxContourArea_<ContainerAllocator> const> ConstPtr;

}; // struct MaxContourArea_

typedef ::opencv_apps::MaxContourArea_<std::allocator<void> > MaxContourArea;

typedef boost::shared_ptr< ::opencv_apps::MaxContourArea > MaxContourAreaPtr;
typedef boost::shared_ptr< ::opencv_apps::MaxContourArea const> MaxContourAreaConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opencv_apps::MaxContourArea_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opencv_apps::MaxContourArea_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::opencv_apps::MaxContourArea_<ContainerAllocator1> & lhs, const ::opencv_apps::MaxContourArea_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.meltpool_contour_area == rhs.meltpool_contour_area &&
    lhs.ellipse_angle == rhs.ellipse_angle &&
    lhs.ellipse_x == rhs.ellipse_x &&
    lhs.ellipse_y == rhs.ellipse_y &&
    lhs.ellipse_width == rhs.ellipse_width &&
    lhs.ellipse_height == rhs.ellipse_height &&
    lhs.rectangle_angle == rhs.rectangle_angle &&
    lhs.rectangle_x == rhs.rectangle_x &&
    lhs.rectangle_y == rhs.rectangle_y &&
    lhs.rectangle_width == rhs.rectangle_width &&
    lhs.rectangle_height == rhs.rectangle_height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::opencv_apps::MaxContourArea_<ContainerAllocator1> & lhs, const ::opencv_apps::MaxContourArea_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace opencv_apps

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::opencv_apps::MaxContourArea_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opencv_apps::MaxContourArea_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opencv_apps::MaxContourArea_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opencv_apps::MaxContourArea_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_apps::MaxContourArea_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_apps::MaxContourArea_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opencv_apps::MaxContourArea_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c924e5f1e96fc91c0132097ca211cda0";
  }

  static const char* value(const ::opencv_apps::MaxContourArea_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc924e5f1e96fc91cULL;
  static const uint64_t static_value2 = 0x0132097ca211cda0ULL;
};

template<class ContainerAllocator>
struct DataType< ::opencv_apps::MaxContourArea_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opencv_apps/MaxContourArea";
  }

  static const char* value(const ::opencv_apps::MaxContourArea_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opencv_apps::MaxContourArea_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 meltpool_contour_area\n"
"float64 ellipse_angle\n"
"float64 ellipse_x\n"
"float64 ellipse_y\n"
"float64 ellipse_width\n"
"float64 ellipse_height\n"
"float64 rectangle_angle\n"
"float64 rectangle_x\n"
"float64 rectangle_y\n"
"float64 rectangle_width\n"
"float64 rectangle_height\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::opencv_apps::MaxContourArea_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opencv_apps::MaxContourArea_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.meltpool_contour_area);
      stream.next(m.ellipse_angle);
      stream.next(m.ellipse_x);
      stream.next(m.ellipse_y);
      stream.next(m.ellipse_width);
      stream.next(m.ellipse_height);
      stream.next(m.rectangle_angle);
      stream.next(m.rectangle_x);
      stream.next(m.rectangle_y);
      stream.next(m.rectangle_width);
      stream.next(m.rectangle_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MaxContourArea_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opencv_apps::MaxContourArea_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opencv_apps::MaxContourArea_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "meltpool_contour_area: ";
    Printer<double>::stream(s, indent + "  ", v.meltpool_contour_area);
    s << indent << "ellipse_angle: ";
    Printer<double>::stream(s, indent + "  ", v.ellipse_angle);
    s << indent << "ellipse_x: ";
    Printer<double>::stream(s, indent + "  ", v.ellipse_x);
    s << indent << "ellipse_y: ";
    Printer<double>::stream(s, indent + "  ", v.ellipse_y);
    s << indent << "ellipse_width: ";
    Printer<double>::stream(s, indent + "  ", v.ellipse_width);
    s << indent << "ellipse_height: ";
    Printer<double>::stream(s, indent + "  ", v.ellipse_height);
    s << indent << "rectangle_angle: ";
    Printer<double>::stream(s, indent + "  ", v.rectangle_angle);
    s << indent << "rectangle_x: ";
    Printer<double>::stream(s, indent + "  ", v.rectangle_x);
    s << indent << "rectangle_y: ";
    Printer<double>::stream(s, indent + "  ", v.rectangle_y);
    s << indent << "rectangle_width: ";
    Printer<double>::stream(s, indent + "  ", v.rectangle_width);
    s << indent << "rectangle_height: ";
    Printer<double>::stream(s, indent + "  ", v.rectangle_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENCV_APPS_MESSAGE_MAXCONTOURAREA_H
