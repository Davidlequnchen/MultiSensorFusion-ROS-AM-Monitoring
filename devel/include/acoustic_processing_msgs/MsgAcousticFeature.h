// Generated by gencpp from file acoustic_processing_msgs/MsgAcousticFeature.msg
// DO NOT EDIT!


#ifndef ACOUSTIC_PROCESSING_MSGS_MESSAGE_MSGACOUSTICFEATURE_H
#define ACOUSTIC_PROCESSING_MSGS_MESSAGE_MSGACOUSTICFEATURE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace acoustic_processing_msgs
{
template <class ContainerAllocator>
struct MsgAcousticFeature_
{
  typedef MsgAcousticFeature_<ContainerAllocator> Type;

  MsgAcousticFeature_()
    : spectral_centroids(0.0)
    , fft(0.0)  {
    }
  MsgAcousticFeature_(const ContainerAllocator& _alloc)
    : spectral_centroids(0.0)
    , fft(0.0)  {
  (void)_alloc;
    }



   typedef float _spectral_centroids_type;
  _spectral_centroids_type spectral_centroids;

   typedef float _fft_type;
  _fft_type fft;





  typedef boost::shared_ptr< ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator> const> ConstPtr;

}; // struct MsgAcousticFeature_

typedef ::acoustic_processing_msgs::MsgAcousticFeature_<std::allocator<void> > MsgAcousticFeature;

typedef boost::shared_ptr< ::acoustic_processing_msgs::MsgAcousticFeature > MsgAcousticFeaturePtr;
typedef boost::shared_ptr< ::acoustic_processing_msgs::MsgAcousticFeature const> MsgAcousticFeatureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator1> & lhs, const ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator2> & rhs)
{
  return lhs.spectral_centroids == rhs.spectral_centroids &&
    lhs.fft == rhs.fft;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator1> & lhs, const ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acoustic_processing_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dceaefa1e58f133ccf0968427c39fdf1";
  }

  static const char* value(const ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdceaefa1e58f133cULL;
  static const uint64_t static_value2 = 0xcf0968427c39fdf1ULL;
};

template<class ContainerAllocator>
struct DataType< ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acoustic_processing_msgs/MsgAcousticFeature";
  }

  static const char* value(const ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 spectral_centroids\n"
"float32 fft\n"
"\n"
"\n"
;
  }

  static const char* value(const ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.spectral_centroids);
      stream.next(m.fft);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgAcousticFeature_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acoustic_processing_msgs::MsgAcousticFeature_<ContainerAllocator>& v)
  {
    s << indent << "spectral_centroids: ";
    Printer<float>::stream(s, indent + "  ", v.spectral_centroids);
    s << indent << "fft: ";
    Printer<float>::stream(s, indent + "  ", v.fft);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACOUSTIC_PROCESSING_MSGS_MESSAGE_MSGACOUSTICFEATURE_H
